{"version":3,"sources":["webpack://_N_E/RotateScreen.module.scss","webpack://_N_E/../styles/mixins.scss","webpack://_N_E/../styles/vars.scss"],"names":[],"mappings":"AAEA,kCCmHE,cDlH2B,CCuG3B,KAAM,CACN,MAAO,CApBP,UAgCiB,CA/BjB,WA+BiB,CDnHjB,YAAa,CC0Lb,SAA8B,CDxL9B,UEgBU,CFfV,qBEgBU,CFrBZ,8DC8HE,oBAAa,CAAb,YAAa,CACb,0BAAmB,CAAnB,kBAAmB,CACnB,qDAAuB","file":"static/css/6a54091cff94668fd939.css","sourcesContent":["@import 'shared';\n\n.RotateScreen {\n  @include position-100(fixed);\n  display: none;\n  @include z-index(rotate);\n  color: $white;\n  background-color: $black;\n\n  &.enabled {\n    @include flex-center;\n  }\n}\n","// Sass Mixins\n//\n// More information about mixins in:\n// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\n// Add comment to every function\n@import 'vars';\n\n/// Set Regular Font as font family. This mixin's name is generic to abstract the font family name in case it changes\n/// @group Fonts\n/// @example scss Input\n///   .landing-section {\n///     @include font-slate-regular();\n///   }\n@mixin font-slate-regular() {\n  font-family: 'SlateStdRegular', #{$generic-fonts};\n}\n\n// Use two pixel values to convert line-height into a unitless number\n// @example scss Input\n//   p {\n//     font-size: 16px;\n//     line-height: line-height(16, 30);\n//   }\n@function line-height($font-size, $line-height) {\n  @if $line-height==normal {\n    @return normal;\n  }\n  @return $line-height / $font-size;\n}\n\n// Use two pixel values to convert letter-spacing into an em value\n// @example scss Input\n//   p {\n//     font-size: 16px;\n//     // letter-spacing: -0.1px;\n//     letter-spacing: letter-spacing(16, -0.1);\n//   }\n@function letter-spacing($font-size, $letter-spacing) {\n  @if $letter-spacing==normal {\n    @return normal;\n  }\n  @return #{$letter-spacing / $font-size}em;\n}\n\n// Define font-size, line-height and letter-spacing in function\n// @example scss Input\n//   p {\n//     // font-size: 16px;\n//     // letter-spacing: -0.1px;\n//     // line-height: 1.5; // This is line-height 24px and font-size: 16px\n//     @include font-size(16, 24, -0.1)\n//   }\n@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {\n  font-size: px($font-size);\n  line-height: line-height($font-size, $line-height);\n\n  @if $letter-spacing !=0 {\n    letter-spacing: letter-spacing($font-size, $letter-spacing);\n  }\n}\n\n/// Improve animation performance for containers\n/// @example scss Input\n///   .card {\n///     @include gpu();\n///   }\n@mixin gpu {\n  backface-visibility: hidden;\n  transform-style: preserve-3d;\n  perspective: 1000px;\n\n  .safari & {\n    perspective: none; // otherwise text and icons become blurry\n  }\n}\n\n/// Set exactly the same width and height of a component, avoid repeat the same dimension\n/// @parameter {Measure unit} $width - Specify width of the box\n/// @parameter {Measure unit} $height [$width] - Specify height of the box, the default value is the width\n/// @example scss Input\n///   .card {\n///     @include box(3.2rem);\n///   }\n///   .card-another {\n///     @include box(3.2rem, 2rem);\n///   }\n@mixin box($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n\n/// Convert the pixels to rem for in a specific resolution, usually 1440px wide\n/// @example scss Input\n///   section {\n///     height: px(200);\n///   }\n@function px($px) {\n  @return $px * 0.1rem;\n}\n\n/// Set top and left to 0\n/// @example scss Input\n///   element {\n///     @include position-0;\n///   }\n@mixin position-0 {\n  top: 0;\n  left: 0;\n}\n\n/// Set full size of box and position\n/// @parameter {string} $pos - one of relative, absolute, fixed. relative by default\n/// @example scss Input\n///   element {\n///     @include position-100(absolute);\n///   }\n@mixin position-100($pos: 'relative') {\n  position: $pos;\n  @include position-0;\n  @include box(100%);\n}\n\n/// Set display flex and center children horizontally and vertically\n/// @example scss Input\n///   element {\n///     @include flex-center;\n///   }\n@mixin flex-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/// Set display flex and center children vertically\n/// @example scss Input\n///   element {\n///     @include flex-center-vert;\n///   }\n@mixin flex-center-vert {\n  display: flex;\n  align-items: center;\n}\n\n/// Set display flex and center children horizontally\n/// @example scss Input\n///   element {\n///     @include flex-center-horiz;\n///   }\n@mixin flex-center-horiz {\n  display: flex;\n  justify-content: center;\n}\n\n/// Center its element (horizontally and vertically) by using transform\n/// @example scss Input\n///   element {\n///     @include transform-center;\n///   }\n@mixin transform-center {\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n}\n\n/// Set vertical center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-vert;\n///   }\n@mixin transform-center-vert {\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n/// Set horizontal center of its element\n/// @example scss Input\n///   element {\n///     @include transform-center-horiz;\n///   }\n@mixin transform-center-horiz {\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n/// Set z-index value in order of $element variable\n/// @example scss Input\n///   element {\n///     @include z-index(preloader);\n///   }\n@mixin z-index($id) {\n  z-index: index($elements, $id);\n}\n\n/// Set breakpoint via media queries\n/// @example scss Input\n///   element {\n///     [...phone styles....]\n///     @include breakpoint(tablet) {\n///        [...tablet+desktop styles...]\n///     }\n///   }\n@mixin breakpoint($size) {\n  @media (min-width: map-get($layout, $size) + px) {\n    @content;\n  }\n}\n\n/// Reset button's look\n/// @example scss Input\n///   button {\n///     @include reset-button;\n///   }\n@mixin reset-button {\n  border: none;\n  outline: none;\n  cursor: pointer;\n  background-color: transparent;\n  padding: 0;\n  text-align: inherit;\n  letter-spacing: inherit;\n  font-size: inherit;\n  text-transform: inherit;\n  display: inline-block;\n  margin: 0;\n  text-decoration: none;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  color: currentColor;\n}\n","@import 'layout';\n\n// Variables\n//\n// Add global variables here, color palette, those variables shared by components all applied to global styling\n\n// ====================================================================\n// Breakpoints\n//\n// Window breakpoints\n// ====================================================================\n$layout-mobile: map-get($layout, mobile) + px;\n$layout-tablet: map-get($layout, tablet) + px;\n$layout-desktopSm: map-get($layout, desktopSm) + px;\n$layout-desktopMd: map-get($layout, desktopMd) + px;\n$layout-desktopLg: map-get($layout, desktopLg) + px;\n\n// ====================================================================\n// Base palette\n//\n// Grayscale and brand colors for use across the site.\n// ====================================================================\n$white: #fff;\n$black: #000;\n$darkgray: #252525;\n\n// ====================================================================\n// General\n//\n// Global color variables, used usually in sections\n// Global variables used across the web app\n// ====================================================================\n$page-bg-color: $darkgray; //$white;\n$element-shadow: 0 16px 16px 0 rgba(0, 0, 0, 0.04);\n$generic-fonts: WorkSansMedium, Helvetica, Arial, sans-serif;\n\n// ====================================================================\n// Nav bar\n// ====================================================================\n$navbar-height-mobile: 6rem;\n$navbar-height-desktop: 8rem;\n\n// ====================================================================\n// List of z-index element\n// ====================================================================\n$elements: pages, main-nav, rotate;\n"],"sourceRoot":""}