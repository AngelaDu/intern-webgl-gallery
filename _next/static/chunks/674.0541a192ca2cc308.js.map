{"version":3,"file":"static/chunks/674.0541a192ca2cc308.js","mappings":"0NA+BA,MA3BmB,SAAbA,I,4HAAAA,GAAN,KACEC,UAA8B,GADhC,KAGEC,SAAW,SAACC,G,QACVC,YACE,W,EACOH,UAAUI,SAAQ,SAACC,GAAaA,OAAAA,EAASH,QAEhDI,EAAAA,GAAAA,OAAgB,IAAM,IAR5B,KAYEC,OAAS,SAACF,GACH,EAAKL,UAAUQ,QAClBC,OAAOC,iBAAiBJ,EAAAA,GAAAA,OAAgB,oBAAsB,SAAQ,EAAOL,UAE1E,EAAKD,UAAUW,SAASN,IAAW,EAAKL,UAAUY,KAAKP,IAhBhE,KAmBEQ,QAAU,SAACR,G,EACJL,UAAY,EAAKA,UAAUc,QAAO,SAACC,GAAMA,OAAAA,IAAMV,KAC/C,EAAKL,UAAUQ,QAClBC,OAAOO,oBAAoBV,EAAAA,GAAAA,OAAgB,oBAAsB,SAAQ,EAAOL,Y,SCd7EgB,EAAa,G,UAAEC,EAAF,EAAEA,UACMC,GAAAA,EAAAA,EAAAA,UAASb,EAAAA,GAAAA,OAAgBA,EAAAA,GAAAA,WAA9Cc,EAAqBD,EAA0C,GAAvDE,EAAaF,EAA0C,GActE,OAZAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,WACnBF,EAAUf,EAAAA,GAAAA,OAAgBA,EAAAA,GAAAA,YAK5B,OAFAkB,EAAOjB,OAAOgB,GAEP,WACLC,EAAOX,QAAQU,MAEhB,KAEG,SAAEE,MAAG,CAACP,UAAWQ,GAAAA,CAAWC,IAAAA,c,EAAmB,G,EAAKA,IAAAA,Q,EAAiBP,E,gGAAUF,G,SAAY,kBAGnG,OAAeU,EAAAA,EAAAA,MAAKX,I,iBC7BpBY,EAAOC,QAAU,CAAC,aAAe,mCAAmC,QAAU","sources":["webpack://_N_E/./src/services/resize.ts","webpack://_N_E/./src/components/RotateScreen/RotateScreen.tsx","webpack://_N_E/./src/components/RotateScreen/RotateScreen.module.scss"],"sourcesContent":["import { device } from '@jam3/detect';\n\ntype ResizeListener = (e?: Event | UIEvent) => void;\n\nclass ResizeService {\n  listeners: ResizeListener[] = [];\n\n  onResize = (e: Event | UIEvent) => {\n    setTimeout(\n      () => {\n        this.listeners.forEach((listener) => listener(e));\n      },\n      device.mobile ? 500 : 0 // some mobile browsers only update window dimensions when the rotate animation finishes\n    );\n  };\n\n  listen = (listener: ResizeListener) => {\n    if (!this.listeners.length) {\n      window.addEventListener(device.mobile ? 'orientationchange' : 'resize', this.onResize);\n    }\n    if (!this.listeners.includes(listener)) this.listeners.push(listener);\n  };\n\n  dismiss = (listener: ResizeListener) => {\n    this.listeners = this.listeners.filter((l) => l !== listener);\n    if (!this.listeners.length) {\n      window.removeEventListener(device.mobile ? 'orientationchange' : 'resize', this.onResize);\n    }\n  };\n}\n\nexport default new ResizeService();\n","import { memo, useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport { device } from '@jam3/detect';\n\nimport styles from './RotateScreen.module.scss';\n\nimport resize from '@/services/resize';\n\nexport type Props = {\n  className?: string;\n};\n\nfunction RotateScreen({ className }: Props) {\n  const [enable, setEnable] = useState(device.phone && device.landscape);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setEnable(device.phone && device.landscape);\n    };\n\n    resize.listen(handleResize);\n\n    return () => {\n      resize.dismiss(handleResize);\n    };\n  }, []);\n\n  return <div className={classnames(styles.RotateScreen, { [styles.enabled]: enable }, className)}>Rotate Screen</div>;\n}\n\nexport default memo(RotateScreen);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RotateScreen\":\"RotateScreen_RotateScreen__btSKJ\",\"enabled\":\"RotateScreen_enabled__zrcuL\"};"],"names":["ResizeService","listeners","onResize","e","setTimeout","forEach","listener","device","listen","length","window","addEventListener","includes","push","dismiss","filter","l","removeEventListener","RotateScreen","className","useState","enable","setEnable","useEffect","handleResize","resize","div","classnames","styles","memo","module","exports"],"sourceRoot":""}