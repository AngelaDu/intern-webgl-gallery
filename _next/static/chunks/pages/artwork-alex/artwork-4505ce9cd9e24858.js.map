{"version":3,"file":"static/chunks/pages/artwork-alex/artwork-4505ce9cd9e24858.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./src/pages/artwork-alex/artwork.js","webpack://_N_E/./src/utils/dispose-objects.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/artwork-alex/artwork\",\n      function () {\n        return require(\"private-next-pages/artwork-alex/artwork.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/artwork-alex/artwork\"])\n      });\n    }\n  ","import { useRef, useEffect } from 'react';\nimport GUI from 'lil-gui';\n\nimport {\n  AdditiveBlending,\n  Color,\n  DoubleSide,\n  FrontSide,\n  MeshPhongMaterial,\n  Mesh,\n  PCFSoftShadowMap,\n  PerspectiveCamera,\n  PlaneBufferGeometry,\n  Scene,\n  ShaderMaterial,\n  ShadowMaterial,\n  SphereGeometry,\n  SpotLight,\n  Texture,\n  Vector3,\n  WebGLRenderer\n} from 'three';\n\n// import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\n// import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\n// import { FXAAShader } from 'three/examples/js/shaders/FXAAShader.js';\n\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nimport disposeObjects from '../../utils/dispose-objects';\n\nfunction Art() {\n  const inputEl = useRef(null);\n  const videoElement = useRef(null);\n  const videoImg = useRef(null);\n\n  useEffect(() => {\n    const sphereRadius = 0.54;\n\n    const video = videoElement.current;\n    const videoImage = videoImg.current;\n\n    const scene = new Scene();\n\n    const renderer = new WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMapSoft = true;\n    renderer.shadowMap.type = PCFSoftShadowMap;\n    // renderer.gammaInput = true;\n    // renderer.gammaOutput = true;\n    // renderer.setClearColor(0x000fff);\n\n    const camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 100);\n    camera.position.z = 2.9 * sphereRadius;\n    camera.position.y = 1.5 * sphereRadius;\n    camera.lookAt(new Vector3(0, 0, 0));\n    camera.layers.enable(1);\n\n    // const controls = new OrbitControls(camera, inputEl.current);\n    // controls.enableDamping = true;\n\n    // SpotLight to cast shadows\n    const spotLight = new SpotLight(0x0077a6, 2);\n    spotLight.position.set(-10, 150, -10);\n    spotLight.distance = 1700;\n    spotLight.power = 10;\n    spotLight.castShadow = true;\n    spotLight.shadow.bias = 0.001;\n    spotLight.shadow.radius = 1;\n    spotLight.shadow.mapSize.width = 4096; // Larger size = better quality\n    spotLight.shadow.mapSize.height = 4096;\n    scene.add(spotLight);\n\n    // Fog\n    // scene.fog = new FogExp2(0xefd1b5, 0.025);\n\n    // // Ambient light\n    // scene.add(new AmbientLight(0x222222));\n\n    // // Directional light\n    // var light = new DirectionalLight(0xffffff, 1);\n    // light.position.set(80, 80, 80);\n    // scene.add(light);\n\n    // Send webcam stream to the <video> tag\n    // if (navigator.mediaDevices.getUserMedia) {\n    //   navigator.mediaDevices\n    //     .getUserMedia({ video: true })\n    //     .then((stream) => (video.srcObject = stream))\n    //     .catch((err) => {});\n    // }\n\n    let stream;\n\n    (async () => {\n      stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      video.srcObject = stream;\n    })();\n\n    // Video to canvas\n    const videoImageContext = videoImage.getContext('2d');\n    // Background color if no video is present\n    videoImageContext.fillStyle = '#000000';\n    videoImageContext.fillRect(0, 0, videoImage.width, videoImage.height);\n    videoImageContext.scale(0.5, 1);\n\n    // Canvas to texture\n    const videoTextureM = new Texture(videoImage);\n\n    // Apply shader on texture\n    var webcamMaterial = new ShaderMaterial({\n      uniforms: {\n        webcam: { type: 't', value: videoTextureM }\n      },\n      fragmentShader: `\n          uniform sampler2D webcam;\n          varying vec2 vUv;\n\n          void main()\n          {\n              vec3 col = texture2D(webcam, vUv).rgb;\n\n              vec3 blue = col * vec3(0.282,0.663,0.78);\n\n              // Output to screen\n              gl_FragColor = vec4(blue, 1.0);\n          }\n          `,\n      vertexShader: `varying vec2 vUv;\n          void main() {\n              vUv = uv;\n                  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n              }`\n    });\n\n    // Glow for orb\n    var glowMaterial = new ShaderMaterial({\n      uniforms: {\n        c: { type: 'f', value: 0.3 },\n        p: { type: 'f', value: 2.0 },\n        glowColor: { type: 'c', value: new Color(0x2288b4) },\n        viewVector: { type: 'v3', value: camera.position }\n      },\n      fragmentShader: `\n      uniform vec3 glowColor;\n      varying float intensity;\n      void main() \n      {\n        vec3 glow = glowColor * intensity;\n          gl_FragColor = vec4( glow, 1.0 );\n      }\n      `,\n      vertexShader: `\n      uniform vec3 viewVector;\n      uniform float c;\n      uniform float p;\n      varying float intensity;\n      void main() \n      {\n        vec3 vNormal = normalize( normalMatrix * normal );\n        vec3 vNormel = normalize( normalMatrix * viewVector );\n        intensity = pow( c - dot(vNormal, vNormel), p );\n        \n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n      }\n      `,\n      side: FrontSide,\n      blending: AdditiveBlending,\n      transparent: true\n    });\n\n    // Texture to sphere\n    var sphere1 = new Mesh(new SphereGeometry(sphereRadius, 64, 64), webcamMaterial);\n    sphere1.castShadow = false;\n    sphere1.receiveShadow = false;\n    scene.add(sphere1);\n    sphere1.position.y = 0.1;\n    sphere1.layers.set(0);\n\n    var glowSphere = new Mesh(new SphereGeometry(sphereRadius, 64, 64), glowMaterial);\n    scene.add(glowSphere);\n    glowSphere.position.y = 0.1;\n    glowSphere.scale.multiplyScalar(1.2);\n    glowSphere.layers.set(0);\n\n    // Second sphere for the shadows\n    const shadowMaterial = new ShadowMaterial();\n    shadowMaterial.opacity = 0.5;\n    shadowMaterial.dithering = true;\n    shadowMaterial.ditheringshadowSide = DoubleSide;\n    var sphere = new Mesh(new SphereGeometry(sphereRadius, 64, 64), shadowMaterial);\n    sphere.castShadow = true;\n    sphere.receiveShadow = false;\n    sphere.position.y = 0.1;\n    sphere.layers.set(0);\n    scene.add(sphere);\n\n    // Floor\n    var floorGeometry = new PlaneBufferGeometry(1000, 1000);\n    var floor = new Mesh(floorGeometry, new MeshPhongMaterial({ color: 0x0f0000 }));\n\n    floor.position.y = -sphereRadius;\n    floor.position.x = 0;\n    floor.position.z = 0;\n    floor.rotation.x = Math.PI / -2;\n    floor.castShadow = false;\n    floor.receiveShadow = true;\n    floor.layers.set(0);\n    scene.add(floor);\n\n    // let bloomPass = new UnrealBloomPass(new Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);\n\n    // bloomPass.threshold = 0.21;\n    // bloomPass.strength = 1.2;\n    // bloomPass.radius = 0.55;\n    // bloomPass.renderToScreen = true;\n\n    let renderScene = new RenderPass(scene, camera);\n\n    // var effectFXAA = new ShaderPass(FXAAShader);\n    // effectFXAA.uniforms['resolution'].value.set(1 / window.innerWidth, 1 / window.innerHeight);\n\n    var composer = new EffectComposer(renderer);\n    composer.setSize(window.innerWidth, window.innerHeight);\n    composer.addPass(renderScene);\n    // composer.addPass( effectFXAA );\n    //composer.addPass(bloomPass);\n\n    // Add gui slider\n    const gui = new GUI();\n\n    var glowFolder = gui.addFolder('Glow Shader Controls');\n\n    let parameters = { c: 0.3, p: 2.0, color: '#2288b4' };\n\n    var cGUI = glowFolder.add(parameters, 'c').min(0.0).max(1.0).step(0.01).name('c').listen();\n    cGUI.onChange(function (value) {\n      glowMaterial.uniforms['c'].value = parameters.c;\n    });\n\n    var pGUI = glowFolder.add(parameters, 'p').min(0.0).max(6.0).step(0.01).name('p').listen();\n    pGUI.onChange(function (value) {\n      glowMaterial.uniforms['p'].value = parameters.p;\n    });\n\n    var glowColor = glowFolder.addColor(parameters, 'color').name('Glow Color').listen();\n    glowColor.onChange(function (value) {\n      glowMaterial.uniforms.glowColor.value.setHex(value.replace('#', '0x'));\n    });\n    glowFolder.open();\n\n    // Render the scene on the page\n    // scene.background = new Color(0x4d322a);\n    inputEl.current.append(renderer.domElement);\n    render();\n\n    // Update the texture each frame\n    let x = 0;\n    let y = 0;\n    let h = videoImage.height;\n    let w = videoImage.width;\n    function render() {\n      if (video.readyState === video.HAVE_ENOUGH_DATA) {\n        videoImageContext.clearRect(0, 0, videoImage.width, videoImage.height);\n        videoImageContext.drawImage(video, x, y, w, h);\n        if (videoTextureM) videoTextureM.needsUpdate = true;\n      }\n      requestAnimationFrame(render);\n      composer.render();\n    }\n\n    return () => {\n      disposeObjects(inputEl.renderer, inputEl);\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n      gui.destroy();\n    };\n  }, []);\n\n  return (\n    <>\n      <div ref={inputEl}></div>\n      <video autoPlay={true} ref={videoElement} id=\"videoElement\" style={{ display: 'none' }}></video>\n      <canvas height=\"1000\" width=\"1000\" ref={videoImg} id=\"videoImage\" style={{ display: 'none' }}></canvas>\n    </>\n  );\n}\n\nexport default Art;\n","/**\n * Recursively dispose threejs objects\n *\n * @export\n * @param {Object3D} object\n * @param {(Scene | Object3D)} parent\n * @returns\n */\nexport default function disposeObjects(object, parent) {\n  if (object === null || object === undefined) return;\n  if (parent) parent.remove(object);\n  if (object.dispose) {\n    object.dispose();\n  }\n  if (object.geometry) {\n    object.geometry.dispose();\n  }\n  if (object.material) {\n    object.material.dispose();\n  }\n  if (object.children) {\n    let i = 0;\n    const l = object.children.length;\n    while (i < l) {\n      disposeObjects(object.children[0], object);\n      i++;\n    }\n  }\n  if (object.type === 'Scene') object.dispose();\n  object = null;\n  console.log('disposing');\n}\n"],"names":["window","__NEXT_P","push","inputEl","useRef","videoElement","videoImg","useEffect","sphereRadius","video","current","videoImage","scene","Scene","renderer","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","shadowMap","enabled","shadowMapSoft","type","PCFSoftShadowMap","camera","PerspectiveCamera","position","z","y","lookAt","Vector3","layers","enable","stream","spotLight","SpotLight","set","distance","power","castShadow","shadow","bias","radius","mapSize","width","height","add","navigator","mediaDevices","getUserMedia","srcObject","videoImageContext","getContext","fillStyle","fillRect","scale","videoTextureM","Texture","webcamMaterial","ShaderMaterial","uniforms","webcam","value","fragmentShader","vertexShader","glowMaterial","c","p","glowColor","Color","viewVector","side","FrontSide","blending","AdditiveBlending","transparent","sphere1","Mesh","SphereGeometry","receiveShadow","glowSphere","multiplyScalar","shadowMaterial","ShadowMaterial","opacity","dithering","ditheringshadowSide","DoubleSide","sphere","floorGeometry","PlaneBufferGeometry","floor","MeshPhongMaterial","color","x","rotation","Math","PI","renderScene","RenderPass","composer","EffectComposer","addPass","gui","GUI","glowFolder","addFolder","parameters","min","max","step","name","listen","onChange","addColor","setHex","replace","open","append","domElement","render","readyState","HAVE_ENOUGH_DATA","clearRect","drawImage","w","h","needsUpdate","requestAnimationFrame","disposeObjects","getTracks","forEach","track","stop","destroy","div","ref","autoPlay","id","style","display","canvas","object","parent","undefined","remove","dispose","geometry","material","children","i","l","length","console","log"],"sourceRoot":""}